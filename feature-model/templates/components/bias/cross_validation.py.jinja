from sklearn.model_selection import KFold
from collections import OrderedDict

{% if reweighing %}
debiaser = Reweighing(unprivileged_group, privileged_group)
{% elif dir %}
{% include "components/bias/dir_transformer.py.jinja" %}
{% elif sampling or demv %}
debiaser = Sampler(round_level={{round_level | default(1,true)}})
{% endif%}

np_data = np.hstack((data.features, data.labels))
kf = KFold(n_splits={{n_splits | default(5,true)}}, shuffle=True)
fairness_metrics = []

for train, test in kf.split(np_data):
  dataset_train = data.subset(train)
  dataset_test = data.subset(test)
  {% if reweighing or sampling or demv %}
  dataset_train = debiaser.fit_transform(dataset_train)
  {% endif %}
  X_train = dataset_train.features
  y_train = dataset_train.labels.ravel()
  {% macro model_training() %}{% include 'components/select_model.py.jinja'%}{% endmacro %}
  {{model_training() | indent(2) }}
  # Metrics
  {% macro fair_metrics() -%} {% include 'components/bias/fairness_metrics.py.jinja'%}{% endmacro %}
  {{fair_metrics() | indent(2) }}

  fairness_metrics.append(metrics)

fair_m = {key: round(np.mean([metric[key] for metric in fairness_metrics]), 4) for key in fairness_metrics[0]}
for key, val in fair_m.items():
    print("%s: %.4f" % (key, val))