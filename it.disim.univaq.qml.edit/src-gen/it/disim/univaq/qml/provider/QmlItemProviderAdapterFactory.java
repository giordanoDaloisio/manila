/**
 */
package it.disim.univaq.qml.provider;

import it.disim.univaq.qml.util.QmlAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class QmlItemProviderAdapterFactory extends QmlAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public QmlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.disim.univaq.qml.FeatureModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureModelItemProvider featureModelItemProvider;

	/**
	 * This creates an adapter for a {@link it.disim.univaq.qml.FeatureModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureModelAdapter() {
		if (featureModelItemProvider == null) {
			featureModelItemProvider = new FeatureModelItemProvider(this);
		}

		return featureModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.disim.univaq.qml.Feature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureItemProvider featureItemProvider;

	/**
	 * This creates an adapter for a {@link it.disim.univaq.qml.Feature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureAdapter() {
		if (featureItemProvider == null) {
			featureItemProvider = new FeatureItemProvider(this);
		}

		return featureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.disim.univaq.qml.Group} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupItemProvider groupItemProvider;

	/**
	 * This creates an adapter for a {@link it.disim.univaq.qml.Group}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAdapter() {
		if (groupItemProvider == null) {
			groupItemProvider = new GroupItemProvider(this);
		}

		return groupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.disim.univaq.qml.RequireConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequireConstraintItemProvider requireConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.disim.univaq.qml.RequireConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequireConstraintAdapter() {
		if (requireConstraintItemProvider == null) {
			requireConstraintItemProvider = new RequireConstraintItemProvider(this);
		}

		return requireConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.disim.univaq.qml.ExcludeConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExcludeConstraintItemProvider excludeConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.disim.univaq.qml.ExcludeConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExcludeConstraintAdapter() {
		if (excludeConstraintItemProvider == null) {
			excludeConstraintItemProvider = new ExcludeConstraintItemProvider(this);
		}

		return excludeConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.disim.univaq.qml.OpenValueAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenValueAttributeItemProvider openValueAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link it.disim.univaq.qml.OpenValueAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenValueAttributeAdapter() {
		if (openValueAttributeItemProvider == null) {
			openValueAttributeItemProvider = new OpenValueAttributeItemProvider(this);
		}

		return openValueAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.disim.univaq.qml.Fairness} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FairnessItemProvider fairnessItemProvider;

	/**
	 * This creates an adapter for a {@link it.disim.univaq.qml.Fairness}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFairnessAdapter() {
		if (fairnessItemProvider == null) {
			fairnessItemProvider = new FairnessItemProvider(this);
		}

		return fairnessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.disim.univaq.qml.Explainability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExplainabilityItemProvider explainabilityItemProvider;

	/**
	 * This creates an adapter for a {@link it.disim.univaq.qml.Explainability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExplainabilityAdapter() {
		if (explainabilityItemProvider == null) {
			explainabilityItemProvider = new ExplainabilityItemProvider(this);
		}

		return explainabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.disim.univaq.qml.Measure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureItemProvider measureItemProvider;

	/**
	 * This creates an adapter for a {@link it.disim.univaq.qml.Measure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureAdapter() {
		if (measureItemProvider == null) {
			measureItemProvider = new MeasureItemProvider(this);
		}

		return measureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.disim.univaq.qml.Threshold} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThresholdItemProvider thresholdItemProvider;

	/**
	 * This creates an adapter for a {@link it.disim.univaq.qml.Threshold}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThresholdAdapter() {
		if (thresholdItemProvider == null) {
			thresholdItemProvider = new ThresholdItemProvider(this);
		}

		return thresholdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.disim.univaq.qml.SelectionValueAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectionValueAttributeItemProvider selectionValueAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link it.disim.univaq.qml.SelectionValueAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectionValueAttributeAdapter() {
		if (selectionValueAttributeItemProvider == null) {
			selectionValueAttributeItemProvider = new SelectionValueAttributeItemProvider(this);
		}

		return selectionValueAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.disim.univaq.qml.AttributeValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeValueItemProvider attributeValueItemProvider;

	/**
	 * This creates an adapter for a {@link it.disim.univaq.qml.AttributeValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeValueAdapter() {
		if (attributeValueItemProvider == null) {
			attributeValueItemProvider = new AttributeValueItemProvider(this);
		}

		return attributeValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.disim.univaq.qml.PredictionQuality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PredictionQualityItemProvider predictionQualityItemProvider;

	/**
	 * This creates an adapter for a {@link it.disim.univaq.qml.PredictionQuality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPredictionQualityAdapter() {
		if (predictionQualityItemProvider == null) {
			predictionQualityItemProvider = new PredictionQualityItemProvider(this);
		}

		return predictionQualityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.disim.univaq.qml.Privacy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrivacyItemProvider privacyItemProvider;

	/**
	 * This creates an adapter for a {@link it.disim.univaq.qml.Privacy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrivacyAdapter() {
		if (privacyItemProvider == null) {
			privacyItemProvider = new PrivacyItemProvider(this);
		}

		return privacyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (featureModelItemProvider != null)
			featureModelItemProvider.dispose();
		if (featureItemProvider != null)
			featureItemProvider.dispose();
		if (groupItemProvider != null)
			groupItemProvider.dispose();
		if (requireConstraintItemProvider != null)
			requireConstraintItemProvider.dispose();
		if (excludeConstraintItemProvider != null)
			excludeConstraintItemProvider.dispose();
		if (openValueAttributeItemProvider != null)
			openValueAttributeItemProvider.dispose();
		if (fairnessItemProvider != null)
			fairnessItemProvider.dispose();
		if (explainabilityItemProvider != null)
			explainabilityItemProvider.dispose();
		if (measureItemProvider != null)
			measureItemProvider.dispose();
		if (thresholdItemProvider != null)
			thresholdItemProvider.dispose();
		if (selectionValueAttributeItemProvider != null)
			selectionValueAttributeItemProvider.dispose();
		if (attributeValueItemProvider != null)
			attributeValueItemProvider.dispose();
		if (predictionQualityItemProvider != null)
			predictionQualityItemProvider.dispose();
		if (privacyItemProvider != null)
			privacyItemProvider.dispose();
	}

}
