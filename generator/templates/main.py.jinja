import argparse
import os
import pickle
from copy import deepcopy
from utils import *
{%include "components/libraries.jinja"%}

def _store_metrics(metrics, method, fairness, save_data, save_model, model_fair):
    df_metrics = pd.DataFrame(metrics)
    df_metrics = df_metrics.explode(list(df_metrics.columns))
    df_metrics['model'] = method
    df_metrics['fairness_method'] = fairness
    if save_data:
        os.makedirs('ris', exist_ok=True)
        df_metrics.to_csv(os.path.join(
            'ris', f'ris_{method}_{fairness}.csv'))
    if save_model:
        os.makedirs('ris', exist_ok=True)
        pickle.dump(model_fair, open(os.path.join(
            'ris', f'{method}_{fairness}_partial.pickle'), 'wb'))
    return df_metrics



def exec(data):
    label = '{{name}}'
    positive_label = {{positive_value}}
    
    {% if single_sensitive_var%}
    unpriv_group = [{ '{{variable_name}}': {{unprivileged_value}} }]
    priv_group = [{ '{{variable_name}}': {{privileged_value}} }]
    sensitive_features = ['{{variable_name}}']
    {% elif multiple_sensitive_vars %}
    {% set variables = variable_names_comma_separated.split(',') %}
    {% set privileged_values = privileged_values_comma_separated.split(',') %}
    {% set unprivileged_values = unprivileged_values_comma_separated.split(',') %}
    priv_group = {
    {% for i in range(0, variables|count)%}
    '{{variables[i]}}': {{privileged_values[i]}},
    {% endfor %}
    }
    unpriv_group = {
    {% for i in range(0, variables|count)%}
    '{{variables[i]}}': {{unprivileged_values[i]}},
    {% endfor %}
    }
    sensitive_features = [{{variables|map("tojson")|join(", ")}}]
    {%else%}
    unpriv_group = []
    priv_group = []
    sensitive_features = []
    {% endif %}

    save_data = {% if save_temporary_results == 'true' %} True {%else%} False {%endif%}

    save_model = {% if save_trained_model == 'true' %} True {%else%} False {%endif%}
    
    ml_methods = {
        {% if logistic__regression %}
        'logreg': LogisticRegression(),
        {%endif%}
        {% if svc %}
        'svm': SVC(),
        {% endif %}
        {% if gradient__boosting__classifier %}
        'gradient': GradientBoostingClassifier()
        {%endif%}
    }

    fairness_methods = {
        {%if pre_processing%}
        'preprocessing': [
            {%if demv%}
            'demv',
            {%endif%}
            {%if reweighing%}
            'reweighing',
            {%endif%}
            {%if dir%}
            'dir'
            {%endif%}
        ],
        {%endif%}
        {% if in_processing %} 
        'inprocessing': [
            {% if exponentiated_gradient %}
            'eg',
            {% endif %}
            {% if grid_search %}
            'grid',
            {% endif %}   
        ],
        {% endif %}
        {% if post_processing %}
        'postprocessing': [
            {% if blackbox %}
            'blackbox'
            {% endif %}
        ]
        {% endif %}
    }

    base_metrics = {
        {% if statistical_parity %}
        'stat_par': [],
        {% endif %}
        {% if equalized_odds %}
        'eq_odds': [],
        {% endif %}
        {% if zero_one_loss %}
        'zero_one_loss': [],
        {% endif %}
        {% if disparate_impact%}
        'disp_imp': [],
        {% endif %}
        {% if accuracy %}
        'acc': [],
        {% endif %}
        {% if harmonic_mean %}
        'hmean': [],
        {% endif %}
    }

    agg_metric = {%if harmonic_mean %} 'hmean' {%endif%}

    dataset_label = {% if multi_class %} 'multi-class' {%else%} 'binary' {%endif%}

    ris = pd.DataFrame()
    for m in ml_methods.keys():
        {%if scaler%}
        model = Pipeline([
            {{""}}{%include 'components/model_scalers.jinja'%}
            ('classifier', ml_methods[m])
        ])
        {%else%}
        model = ml_methods[m]
        {%endif%}
        for f in fairness_methods.keys():
            model = deepcopy(model)
            data = data.copy()
            if f == 'preprocessing':
                for method in fairness_methods[f]:
                    metrics = deepcopy(base_metrics)
                    model_fair, ris_metrics = cross_val(classifier=model, data=data, groups_condition=unpriv_group, label=label, metrics=metrics, positive_label=positive_label, sensitive_features=sensitive_features, preprocessor=method, n_splits={{K | default(10, true)}})
                    df_metrics = _store_metrics(ris_metrics, m, method, save_data, save_model, model_fair)
                    ris = ris.append(df_metrics)
            elif f == 'inprocessing':
                for method in fairness_methods[f]:
                    metrics = deepcopy(base_metrics)
                    model_fair, ris_metrics = cross_val(classifier=model, data=data, groups_condition=unpriv_group, label=label, metrics=metrics, positive_label=positive_label, sensitive_features=sensitive_features, inprocessor=method, n_splits={{K | default(10,true)}})
                    df_metrics = _store_metrics(
                        ris_metrics, m, method, save_data, save_model, model_fair)
                    ris = ris.append(df_metrics)
            else:
               for method in fairness_methods[f]:
                   metrics = deepcopy(base_metrics)
                   model_fair, ris_metrics = cross_val(classifier=model, data=data, groups_condition=unpriv_group, label=label, metrics=metrics, positive_label=positive_label,sensitive_features=sensitive_features, postprocessor=method, n_splits={{K | default(10,true)}})
                   df_metrics = _store_metrics(ris_metrics, m, method, save_data, save_model, model_fair)
                   ris = ris.append(df_metrics)
    {%if fairness%}
    report = ris.groupby(['fairness_method', 'model']).agg(
        np.mean).sort_values(agg_metric, ascending=False).reset_index()
    {%else%}
    report = ris.groupby(['model']).agg(
        np.mean).sort_values(agg_metric, ascending=False).reset_index()
    {%endif%}
    best_ris = report.iloc[0,:]
    model = ml_methods[best_ris['model']]
    {% if scaler %}
    model = Pipeline([
        {{''}}{%include 'components/model_scalers.jinja'%}
        ('classifier', model)
    ])
    {% endif %}
    {% if demv %}
    if best_ris['fairness_method'] == 'demv':
        demv = DEMV(round_level=1)
        data = demv.fit_transform(data, sensitive_features, label)
        model.fit(data.drop(label,axis=1).values, data[label].values.ravel())
        return model, report
    {%endif%}
    {%if exponentiated_gradient%}
    if best_ris['fairness_method'] == 'eg':
        if dataset_label == 'binary':
            constr = BoundedGroupLoss(DemographicParity(), upper_bound=0.1)
        else:
            constr = BoundedGroupLoss(ZeroOneLoss(), upper_bound=0.1)
        eg = ExponentiatedGradient(
            model, constr, sample_weight_name="classifier__sample_weight")
        eg.fit(data.drop(label, axis=1).values, data[label].values.ravel(),sensitive_features=data[sensitive_features])
        return eg, report
    {%endif%}
    {% if grid_search%}
    else:
        if dataset_label == 'binary':
            constr = BoundedGroupLoss(DemographicParity(), upper_bound=0.1)
        else:
            constr = BoundedGroupLoss(ZeroOneLoss(), upper_bound=0.1)
        grid = GridSearch(
            model, constr, sample_weight_name="classifier__sample_weight")
        grid.fit(data.drop(label, axis=1).values, data[label].values.ravel(),sensitive_features=data[sensitive_features])
        return grid, report
    {%endif%}


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Experiment file for fairness testing')
    parser.add_argument('-d', '--dataset', type=str,
                        help='Required argument: relative path of the dataset to process')
    args = parser.parse_args()
    
    {%include "components/data_loader.jinja"%}

    model, report = exec(data)
    os.makedirs('ris', exist_ok=True)
    report.round(3).to_csv(os.path.join('ris','report.csv'))
    pickle.dump(model, open(os.path.join('ris','model.pkl'), 'wb'))
