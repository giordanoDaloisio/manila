scaler = MinMaxScaler(copy=False)
data.features = scaler.fit_transform(data.features)
{%if single_sensitive_variable%}
di = DisparateImpactRemover(sensitive_attribute='{{variable_name}}')
data = di.fit_transform(data)
data.features = np.delete(data.features, data.feature_names.index('{{variable_name}}'), axis=1)
{% else %}
{% set vars = variables_names.split(',') %}
{% set privileged_values = privileged_value.split(',') %}
{% set unprivileged_values = unprivileged_value.split(',') %}
df = data.convert_to_dataframe()[0]
probs = (
    df.value_counts([{{vars|map('tojson')|join(' ,')}}], normalize=True).unstack().reset_index()
    .melt(id_vars='{{vars[0]}}', value_vars=[0.0,1.0], var_name='{{vars[1]}}', value_name='probs'))

for {{vars[0]}},{{vars[1]}},prob in probs.values:
    df.loc[(df['{{vars[0]}}'] == {{vars[0]}}) & (df['{{vars[1]}}'] == {{vars[1]}}), 'prob'] = prob

di = DisparateImpactRemover(sensitive_attribute='prob')
data = BinaryLabelDataset(df=df, label_names=['{{label_name}}'], protected_attribute_names=['prob'])
data = di.fit_transform(data)
df_dir = data.convert_to_dataframe()[0]
df_dir.loc[df_dir['prob'].round(6) == 0.077834, 'prob'] = 1
df_dir.loc[df_dir['prob'].round(6) != 1, 'prob'] = 0
privileged_group = [{'prob': 1}]
unprivileged_group = [{'prob': 0}]
data = BinaryLabelDataset(df=df_dir, label_names=['{{label_name}}'], protected_attribute_names=['prob'])
{% if not cross_validation %}
dataset_train, dataset_test = data.split([{{train_size | default(0.8, true)}}], shuffle=True)
{% endif %}
{% endif %}